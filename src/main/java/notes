jre = jvm + system lib

compile        runtime

foo.java       classloader
-                   -
foo.class     bytecode verfier
                   -                           - jit compiler
                   interpreter      
                   -
                   runtime

                  ——————————————————————
                   hardware




young  —  old  —  permanent
      
permanent - stores .class files and interned strings
new objects are stored in young space
objects which have survived gc will be moved to old space
old space is also called tenured space
new space is eden space


when minor gc is triggered , its a stop the world event, minor gc is on eden space only.
all the derefrenced objects will be removed from memory.
within the eden space we have 2 survivor spaces

first gc
tospace is the suvivor space to which the objects are moved.
second gc 
now the tospice has unreferenced/referenced  objects , the referenced objects will be moved to  tospace(previous gc this was from) and the tospace will be named as from , i.e. switch in responsibilities

so now s0 will be empty and s1 has some objects , the 3rd gc  s1 will be empty

eg 
o1,o2,o3 are in eden

1gc  -  s0 and s1 are empty
s0 ( to space) gets o1 and o2 ( o1 and o2 are marked as 1)
s1 is empty
eden has only o3 which is deference and collected thus eden has zero objects

now 
eden has few more objects o4,o5,o6

2gc
eden - o4,o5,o6
04,05,06 are live
02 is still live from s0
01 is collected 

s1( which is empty becomes tospace) — gets o2,o4,o5,o6
02 gets counter increment to 2 , o4,o5,o6 get 1
s0 is not empty


3rd gc
s0 gets 02,04,05,06   - o2 = 3 , rest are 2
s1 is empty now.




once the age of an object becomes more than a certain value i.e. 15  , this is moved to tenured space.
max tenuring threshold = 15
-XXmaxTenuringThreshold=8 
default value is 15



now when the old / tenured space become full, a major gc is triggered


some more flags:
-XX:NewRatio=2
(means new space is allocated 1 and old space 2 = 3 parts) is half the ratio of the allocated space 
eg: -Xms20 -Xmx20m
new space = 1/3 and old space = 2/3
so new space = 20/3 and old space = 20*2/3
4.5 and 13.5 observed values



-XX:NewRatio=4
new space = 1/5 and old space = 4/5


old = 2.66

new = 455m + 455m + 1.33

newratio=2


machine has 16 gb ram


so heap size = 1/4th os 16 = 4 gb ram

from 4gb  1:2 ratio means   1/3 for eden and 2/3 for old
 old space = 4 *2/3 gb  = 2.66
new space = 4*1/3 gb  = 1.33


-Xms10m  -Xmx10m
old space shows as 7m
eden 2m   
s0 1m
s1 1m

-XX:MaxNewSize 


tip try -Xms20 -Xmx20m to be same value 


-XX:NewSize=8m
-XX:MaxNewSize=8m
both can be combined as -Xmn8m


what is survivor ratio ??

general guidelines
size of young should never exceed more than 50% of total heap size
sum of size survivor spaces should be less than 50% of young size
when u alloocate heap size , don't go beyond 50% of the machine ram


what if you want to log the GC output -Xloggc:gcdetails.log
this will create gcdetails.log in the current directory
-XX:+PrintGCDateStamps


what is jstat?
its a better way of monitoring gc stats

jstat -gcutil 6902 1000
 S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00   0.00  60.55   0.00  17.28  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  68.55   0.00  17.28  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  76.66   0.00  17.28  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  82.66   0.00  17.28  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  90.78   0.00  17.28  19.76      0    0.000     0    0.000    0.000
  0.00   0.00 100.00   0.00  17.28  19.76      0    0.000     0    0.000    0.000
  0.00  93.76   9.90  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  17.96  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  28.29  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  40.78  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  50.84  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  62.88  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  74.94  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  87.00  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00  93.76  98.88  34.04  61.14  63.41      1    0.006     0    0.000    0.006
  0.00   0.00  10.32  77.13  61.54  63.41      2    0.013     1    0.100    0.113
  0.00   0.00  24.82  77.13  61.54  63.41      2    0.013     1    0.100    0.113
  0.00   0.00  38.93  77.13  61.54  63.41      2    0.013     1    0.100    0.113
  0.00   0.00  53.27  77.13  61.54  63.41      2    0.013     1    0.100    0.113
  0.00   0.00  69.60  77.13  61.54  63.41      2    0.013     1    0.100    0.113
  0.00   0.00  83.73  77.13  61.54  63.41      2    0.013     1    0.100    0.113
  0.00   0.00 100.00  77.13  61.54  63.41      2    0.013     2    0.100    0.113
  0.00   0.00  63.48  99.06  61.55  63.41      2    0.013     2    0.156    0.170
  0.00   0.00  79.66  99.06  61.55  63.41      2    0.013     2    0.156    0.170
  0.00   0.00  97.83  99.06  61.55  63.41      2    0.013     2    0.156    0.170
  0.00   0.00 100.00  99.24  61.56  63.41      2    0.013    25    0.786    0.799

S0 - percenatge so space
O - old 
M - metaspace
YGC - young gc
YGCT= young gc time
FGCT = full gc time
GCT = YGCT + FGCT

when FC is triggered then it automatically trigges YGC - u can observe that when FGC =1 it increments YGC = 1+1 = 2
it also makes both surviors spaces to zero

FGC is triggered on 3 cases:
1)YGC may trigger it
2)JVM triggers it
3)Perm space becomes full


One of the other uses of jstat is remote monitoring

?? what is a policy file in java
.policy file  , when we want to give permissions to a jvm we can use policy files.
This way we can run the jvm in a sandbox eg: no permissions to write files.
For this we use a security manager
-Djava.security.policy=/Users/ravi/repositories/spring-training/policyfile
'-D' is used to pass system properties
for a tool like jstat if you want to pass some properties 
use  jstat '-J-Djava.security.policy'




-- how to analyze for memory leaks
1)jhat
2)eclipse mat

first create a heap dump

1)jhat ~/heapdump-1489661142978.hprof
this starts an http server in the background , you can go via a browser
http://localhost:7000
click on instance counts
http://localhost:7000/showInstanceCounts/ - this shows u objects in memory at that point

shallow heap and retained heap

object A is composed of B and C

shallow heap = space occupied by A only
retained heap dump = A + B + C


what is jmap ?
jmap allows you to create heap dumps
we wrap this in a shell script and shcedule it as cron etc so that it creates dumps based on scheduled time ,this does not affect the performance of the code.

jmap -dump:file=jmapheap.hprof,format=b <pid>

jmap -dump:file=jmapheap.hprof,format=b 7152



we want a dump to be created when there is a jvm crash
-XX:+HeapDumpOnOutOfMemoryError

java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/Users/ravi/heapdump -XX:InitialHeapSize=10m -XXMaxHeapSize=20m -XX:+PrintGcDetails -cp spring-training-1.0-SNAPSHOT.jar com.spring.training.memorytest.Test 

this will create a dump , the file will be named after the pid of rthe process that created it --> java_pid7161.hprof

to create a heapdump file in a particular folder

-XX:HeapDumpPath=/Users/ravi


what is -XX:+ etc

-XX means its a non standard option ie not supported by java itself but vendors have it
+ means it wont have a value
-XX:+HeapDumpOnOutOfMemoryError
-XX:InitialHeapSize=10m   ( no plus sign hence we spicify a value ie =10m)






Deadlocks !!!!
Analyze Thread-dumps !!!


You can use a tool called jconsole for monitoring threads, it internally uses jmx apis to monitor the jvm.
>jconsole  at command prompt and connect

can also use JvisualVM and create a thread dump.
Save the threaddump file.
we will analyze via ibm thread dump analyzer.

java -jar ha456.jar

what if you have a remote application and want to connect via various tools , ie remotely
-- we need to pass some parameters to disable security

java -Dcom.sun.management.jmxremote.port=1055 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false com.spring.training.deadlock.DeadLockTest


to connect to remote jvm via jvisualvm go to file->add jmx connection 
connection=localhost:portnumber


** you can create a thread dump using jstack 
> jstack <pid>  > mythread-dump.txt



some commonly used command line tools for help on performance of the application
jinfo  
jcmd 

jinfo  --> gives info about the jvm eg: max min heap size
jinfo -flag InitialHeapSize <pid>
jinfo -flag NewRatio <pid>


jcmd --> combines a lot of things u can do eg jps,jinfo,jstat etc etc can be done via jcmd

jcmd -l --> gives pids 
jcmd <pid>

jcmd <pid> GC.run  --> triggers garbage collection on the running process
jcmd <pid> help    --> gives you information on all the options that can be used for the pid


*********************************
Given a application how to find the performance bottle necks?
Do the following steps one after another , check for performance after every step...
********************************

1) Disable GC explicitly   --> this can be done via flag on command line , a developer might have put it somehere in the code wrongly.
2) Adjust the heap size/ old size to reduce the number of major garbage collections.( rough guide , number of major gc approx 1/10 of minor gcs)
3) Adjust the eden space to reduce the number of minor gcs 
4) find out if there are deadlocks if any !!
5) find out the memory leaks and address them..
6) perform cpu profiling of slowly running methods and address them..
7)fine tune the JIT compiler
8) fine tune the code



****
profiling the cpu .., see code in cpuprofiling package
***

***
jit 
***
the most frequently used methods are cached by the jvm in code cache so that its not interpreted again and again
it uses something called compile thresh hold, compile thresh hold denotes the number of times a method should have been called to be added to code cache.
for 32bit jvm is 1500 and for 64 bit it is 10,000

we can tune the jit !























